using Google.Protobuf;
using Google.Protobuf.Compiler;
using Google.Protobuf.Reflection;
// using Microsoft.CodeAnalysis.CSharp;
// using static Microsoft.CodeAnalysis.SyntaxNode;
using System.Text;

namespace contract_plugin_csharp
{
    // Generates the overall "container" for the generated C# contract
    class CSharpContainer
    {
        public CSharpContainer()
        {
            //TODO setup steps
        }

        // TODO remove after development
        // This is for debugging purposes only
        private static void DumpCodeRequestTxtToFile(string textToWrite, string filePath)
        {
            try
            {
                // Write the text to the file.
                File.WriteAllText(filePath, textToWrite);

                Console.WriteLine($"Text successfully written to the file: {filePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DumpCodeRequestTxtToFile error: {ex.Message}");
            }

        }

        public CodeGeneratorResponse Generate(CodeGeneratorRequest request)
        {
            /*
            if(!request.IsInitialized())
            {
                //TODO return an error insted
                return new CodeGeneratorResponse();
            }
            DumpCodeRequestTxtToFile(request.ToString(),"codeGeneratorRequest.txt");
            */
            string csharpNameSpace;
            var response = new CodeGeneratorResponse();
            StringBuilder output = new StringBuilder();
            foreach (FileDescriptorProto file in request.ProtoFile)
            {
                output.AppendLine("// Code generated by protoc-gen-cs. AESHAN TEST!!! DO NOT EDIT.");
                csharpNameSpace = file.Options.CsharpNamespace;
                output.AppendLine($"namespace {csharpNameSpace}{{");
                // make service method list
                foreach (var serviceType in request.ProtoFile.SelectMany((x) => x.Service))
                {
                    output.AppendLine($"class {serviceType.Name} {{");

                    foreach (var method in serviceType.Method)
                    {
                        output.AppendLine($"public {method.OutputType} {method.Name}({method.InputType}){{}}");
                    }

                    output.AppendLine("}");
                }
                output.AppendLine("}");
                //TODO call CsharpContractBaseClass.Generate(); probabaly move some of the above logic inside

                string generatedCSCodeBody = output.ToString();

                //TODO Experiment with Roslyn-programmatic code-formatter
                // var generatedCSCodeNodeRoot = CSharpSyntaxTree
                //     .ParseText(generatedCSCodeBody)
                //     .GetRoot();
                //
                // generatedCSCodeBody = generatedCSCodeNodeRoot

                // set as response
                response.File.Add(
                    new CodeGeneratorResponse.Types.File()
                    {
                        Name = file.Name.Replace(".proto", "_generated.cs"),
                        Content = generatedCSCodeBody,
                    }
                );
            }

            return response;
        }
    }
}