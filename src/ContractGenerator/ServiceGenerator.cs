using ContractGenerator.Primitives;
using Google.Protobuf.Reflection;

namespace ContractGenerator;

public class ServiceGenerator : GeneratorBase
{
    private GeneratorOptions _options;
    private FileDescriptor _fileDescriptor;

    public ServiceGenerator(FileDescriptor fileDescriptor, GeneratorOptions options)
    {
        _fileDescriptor = fileDescriptor;
        _options = options;
    }

    public override string? Generate()
    {
        switch (_fileDescriptor.Services.Count)
        {
            // Don't write out any output if there no services, to avoid empty service
            // files being generated for proto files that don't declare any.
            case 0:
                return "";
            case > 1:
                throw new Exception(_fileDescriptor.Name + ": File contains more than one service.");
        }

        // Don't write out any output if there no event for event-only generation
        // scenario, this is usually for base contracts
        if (_options.GenerateEventOnly && !_fileDescriptor.ContainsEvent()) return "";

        // Write out a file header.
        PrintLine(
            $"""
             // <auto-generated>
             //     Generated by the protocol buffer compiler.  DO NOT EDIT!
             //     source: {_fileDescriptor.Name}
             // </auto-generated>
             """);

        // use C++ style as there are no file-level XML comments in .NET
        // string leadingComments = GetCsharpComments(file, true);  TODO uncomment once PR merged
        // if (!leadingComments.empty()) {
        //     Print("// Original file comments:\n");
        //         PrintRaw(leading_comments.c_str());
        // }

        PrintLine("#pragma warning disable 0414, 1591");
        PrintLine();

        InRegion("Designer generated code", () =>
        {
            PrintLine();
            PrintLine(
                """
                using System.Collections.Generic;
                using aelf = global::AElf.CSharp.Core;
                """);
            PrintLine();
            Print($"namespace {_fileDescriptor.GetNamespace()} ");
            InBlock(() =>
            {
                Events();
                ContractContainer();
            });
        });

        return PrintOut();
    }

    private void Events()
    {
        if (!_options.GenerateEvent) return;
        // Events are not needed for contract reference
        PrintLine();
        InRegion("Events", () =>
        {
            foreach (var msg in _fileDescriptor.MessageTypes)
            {
                PrintIgnoreWhitespace(new EventTypeGenerator(msg, _options).Generate());
            }
        });
        PrintLine();
    }

    private void ContractContainer()
    {
        if (!_options.GenerateContainer) return;
        foreach (var svc in _fileDescriptor.Services)
        {
            PrintIgnoreWhitespace(new Generator(svc, _options).Generate());
        }
    }
}
